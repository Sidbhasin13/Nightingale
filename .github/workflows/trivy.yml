name: Trivy Scan

on:
  push:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with GitHub Container Registry
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: echo $CR_PAT | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Verify Image Existence
        run: |
          if ! docker pull --platform linux/amd64 ghcr.io/rajanagori/nightingale:stable; then
            echo "Docker image not found for amd64. Trying arm64."
            if ! docker pull --platform linux/arm64 ghcr.io/rajanagori/nightingale:stable; then
              echo "Docker image not found for arm64."
              exit 1
            fi
            exit 1
          fi

      - name: Check if Trivy is installed
        run: |
          if ! command -v trivy &> /dev/null; then
            echo "Trivy is not installed. Installing Trivy..."
            sudo apt-get update
            sudo apt-get install -y wget
            wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
            sudo dpkg -i trivy_0.57.0_Linux-64bit.deb
          else
            echo "Trivy is already installed."
          fi
      
      - name: Check if 24 hours have passed since the last refresh of Trivy DB
        run: |
          if [ -f "${HOME}/.trivy_last_refresh" ]; then
            LAST_REFRESH=$(cat ${HOME}/.trivy_last_refresh)
            CURRENT_TIME=$(date +%s)
            TIME_DIFF=$((CURRENT_TIME - LAST_REFRESH))
            MAX_TIME_DIFF=$((24 * 60 * 60))

            if [ $TIME_DIFF -gt $MAX_TIME_DIFF ]; then
              echo "24 hours have passed. Proceeding to refresh the Trivy database."
              echo "REFRESH=true" >> $GITHUB_ENV  
            else
              echo "Less than 24 hours since last refresh. Skipping refresh."
              echo "REFRESH=false" >> $GITHUB_ENV 
            fi
          else
            echo "No refresh file found. Performing refresh."
            echo "REFRESH=true" >> $GITHUB_ENV
          fi

      - name: Force Trivy to refresh the database if needed
        if: env.REFRESH == 'true'
        run: |
          echo "Refreshing Trivy database..."
          trivy --cache-dir ${HOME}/.cache/trivy --refresh

          date +%s > ${HOME}/.trivy_last_refresh

      - name: Run Trivy vulnerability scanner
        run: |
          export TRIVY_AUTH_URL="https://ghcr.io"
          export TRIVY_TOKEN=$GITHUB_TOKEN
          for i in {1..5}; do
            trivy image \
              --skip-dirs /home/wordlist \
              --skip-files home/tools_web_vapt/WhatWeb/plugins/IpToCountry.csv \
              --format sarif \
              --output trivy-results.sarif \
              --severity CRITICAL,MEDIUM \
              ghcr.io/rajanagori/nightingale:stable && break || sleep 60
          done

      - name: Generate SPDX SBOM
        run: |
          if ! trivy image \
              --format spdx \
              --scanners vuln \
              --output sbom.spdx.json \
              ghcr.io/rajanagori/nightingale:stable; then
            echo "Warning: SPDX SBOM generation failed or lacked necessary compliance info."
          fi

      - name: Generate CycloneDX SBOM
        run: |
          if ! trivy image \
              --format cyclonedx \
              --scanners vuln \
              --output sbom.cyclonedx.json \
              ghcr.io/rajanagori/nightingale:stable; then
            echo "Warning: CycloneDX SBOM generation failed or lacked necessary security info."
          fi

      - name: Create a ZIP file for artifacts
        run: |
          mkdir -p artifacts
    
          mv trivy-results.sarif artifacts/
          mv sbom.spdx.json artifacts/
          mv sbom.cyclonedx.json artifacts/

          zip -r artifacts.zip artifacts/
      
      - name: Upload SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'artifacts/trivy-results.sarif'

      - name: Upload the ZIP file as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-artifacts
          path: artifacts.zip