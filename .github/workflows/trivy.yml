name: Trivy Scan

on:
  push:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"

permissions:
  contents: read
  security-events: write

jobs:
  setup:
    name: Fetch Stable Images from GitHub Container Registry
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.fetch_images.outputs.images }}
    steps:
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y wget jq zip

      - name: Authenticate with GitHub Container Registry
        env:
          CR_PAT: ${{ secrets.TOKEN }}
        run: echo $CR_PAT | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Fetch Stable Images from GitHub Container Registry
        id: fetch_images
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "Fetching stable images from GitHub Container Registry..."
          RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/rajanagori/packages?package_type=container")

          IMAGES=$(echo "$RESPONSE" | jq -r 'map(select(.package_type == "container")) | .[].name')

          if [ -z "$IMAGES" ]; then
            echo "No container images found. Exiting."
            exit 1
          fi

          SELECTED_IMAGES=()
          for PACKAGE in $IMAGES; do
            VERSIONS_RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/users/rajanagori/packages/container/${PACKAGE}/versions?per_page=100")
            
            if [[ "$VERSIONS_RESPONSE" == *"Not Found"* || -z "$VERSIONS_RESPONSE" ]]; then
              echo "No versions or 404 error for package: $PACKAGE, skipping..."
              continue
            fi

            TAGS=$(echo "$VERSIONS_RESPONSE" | jq -r '.[]?.metadata?.container?.tags[]?')
            STABLE_PRESENT=$(echo "$TAGS" | grep -w 'stable')
            ARM64_PRESENT=$(echo "$TAGS" | grep -w 'arm64')

            if [[ -n "$STABLE_PRESENT" && -n "$ARM64_PRESENT" ]]; then
              echo "Both stable and arm64 tags found for package: $PACKAGE"

              SELECTED_IMAGES+=("ghcr.io/rajanagori/${PACKAGE}:stable")
              SELECTED_IMAGES+=("ghcr.io/rajanagori/${PACKAGE}:arm64")
            else
              echo "No tags with both 'stable' and 'arm64' found for package: $PACKAGE, skipping..."
            fi
          done

          if [ ${#SELECTED_IMAGES[@]} -eq 0 ]; then
            echo "No stable images found, skipping the job."
            exit 0
          fi

          echo "::set-output name=images::$(jq -c -n '$ARGS.positional' --args "${SELECTED_IMAGES[@]}")"

  scan:
    name: Run Trivy Scan and Generate SBOM
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.setup.outputs.images) }}
    steps:
      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.0_Linux-64bit.deb
          rm trivy_0.57.0_Linux-64bit.deb

      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy/db
          key: ${{ runner.os }}-trivy-db-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-${{ matrix.image }}-

      - name: Refresh Trivy DB if necessary
        run: |
          echo "Checking if Trivy vulnerability database needs to be refreshed..."
          DB_PATH=~/.cache/trivy/db
          if [[ ! -f "$DB_PATH" ]] || [[ $(find $DB_PATH -mmin +60) ]]; then
            echo "Refreshing Trivy vulnerability database..."
            trivy image --download-db-only
          else
            echo "Trivy DB is up-to-date, no need to refresh."
          fi

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Trivy Vulnerability Scanner
        run: |
          IMAGE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9]/_/g')
          echo "Scanning ${{ matrix.image }}..."
          if [[ "${{ matrix.image }}" == *":arm64" ]]; then
            PLATFORM_OPTION="--platform=linux/arm64"
            echo "Detected arm64 tag. Adding platform option: $PLATFORM_OPTION"
          else
            PLATFORM_OPTION=""
          fi
          mkdir -p artifacts
          echo "Scanning ${{ matrix.image }} for vulnerabilities and generating SARIF and SBOM..."
          trivy image \
            --format sarif \
            --scanners vuln \
            --severity CRITICAL,MEDIUM \
            --timeout 60m \
            --output artifacts/trivy-results-${IMAGE_NAME}.sarif \
            $PLATFORM_OPTION ${{ matrix.image }}

          trivy image \
            --format cyclonedx \
            --scanners vuln \
            --severity CRITICAL,MEDIUM \
            --timeout 60m \
            --output artifacts/sbom-${IMAGE_NAME}.cyclonedx.json \
            $PLATFORM_OPTION ${{ matrix.image }}

          echo "Verifying files in artifacts directory..."
          ls -al artifacts/

          if [[ ! -f "artifacts/trivy-results-${IMAGE_NAME}.sarif" ]]; then
            echo "Error: SARIF file was not created."
            exit 1
          fi

          if [[ ! -f "artifacts/sbom-${IMAGE_NAME}.cyclonedx.json" ]]; then
            echo "Error: JSON SBOM file was not created."
            exit 1
          fi
      
      - name: Set Image Name for Upload
        id: set_image_name
        run: echo "IMAGE_NAME=$(echo '${{ matrix.image }}' | sed 's/[^a-zA-Z0-9]/_/g')" >> $GITHUB_ENV

      - name: Upload SARIF file to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: artifacts/trivy-results-${{ env.IMAGE_NAME }}.sarif
      
  zip_and_send_email:
  name: Zip and Send SBOM Files via Gmail
  needs: scan
  runs-on: ubuntu-latest
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download SBOM files from scan job
      run: |
        echo "Fetching SBOM files from the artifacts directory in the scan job..."
        mkdir -p zip-directory
        cp $GITHUB_WORKSPACE/artifacts/*.cyclonedx.json zip-directory/
      
    - name: Zip SBOM files
      run: |
        echo "Zipping all SBOM files..."
        zip -r artifacts.zip zip-directory/*.cyclonedx.json

    - name: Send SBOM Files via Gmail
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_APP_PASSWORD }}
        subject: "Trivy SBOM Files"
        body: "Attached are the SBOM files generated by the Trivy scan."
        to: "${{ secrets.USER_SB }},${{ secrets.USER_RN }}"
        from: ${{ secrets.GMAIL_USERNAME }}
        attachments: artifacts.zip
