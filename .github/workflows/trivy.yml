name: Trivy Scan

on:
  push:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"

permissions:
  contents: read
  security-events: write

jobs:
  setup:
    name: Setup Environment and Fetch Images
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.fetch_images.outputs.images }}
      trivy_cache_key: ${{ steps.prepare_trivy_cache.outputs.cache_key }}
    steps:
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y wget jq zip

      - name: Cache Trivy Binary and Database
        id: prepare_trivy_cache
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/trivy
            ~/.cache/trivy
          key: trivy-setup-cache

      - name: Install Trivy if Not Cached
        if: steps.prepare_trivy_cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing Trivy..."
          wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_$(uname -s)_$(uname -m).tar.gz | tar zxvf - -C /usr/local/bin/
          trivy image --download-db-only

      - name: Authenticate with GitHub Container Registry
        env:
          CR_PAT: ${{ secrets.TOKEN }}
        run: echo $CR_PAT | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Fetch Stable Images from GitHub Container Registry
        id: fetch_images
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "Fetching stable images from GitHub Container Registry..."
          RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/RAJANAGORI/packages?package_type=container")

          echo "API Response: $RESPONSE"

          IMAGES=$(echo "$RESPONSE" | jq -r 'map(select(.package_type == "container")) | .[].name')

          STABLE_IMAGES=()
          for PACKAGE in $IMAGES; do
            TAGS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/users/RAJANAGORI/packages/container/${PACKAGE}/versions?per_page=100" \
              | jq -r '[.[] | select(.tags | contains(["stable"])) | .tags[]] | .[]' || echo "")

            if [[ -n "$TAGS" ]]; then
              for TAG in $TAGS; do
                STABLE_IMAGES+=("ghcr.io/RAJANAGORI/${PACKAGE}:${TAG}")
              done
            else
              echo "No stable tags found for ${PACKAGE}, skipping..."
            fi
          done

          echo "Stable images found: ${STABLE_IMAGES[*]}"
          echo "::set-output name=images::$(jq -c -n '$ARGS.positional' --args "${STABLE_IMAGES[@]}")"

  prepare:
    name: Pre-download Trivy DB and Images
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      shared_zip: ${{ steps.prepare_shared.outputs.shared_zip }}
    steps:
      - name: Pre-pull and Save Docker Images
        run: |
          mkdir -p shared
          IMAGES=${{ needs.setup.outputs.images }}
          for IMAGE in $(echo "$IMAGES" | jq -r '.[]'); do
            docker pull $IMAGE || exit 1
            IMAGE_NAME=$(echo $IMAGE | sed 's/[^a-zA-Z0-9]/_/g')
            docker save $IMAGE > shared/${IMAGE_NAME}.tar
          done

      - name: Compress Shared Files
        id: prepare_shared
        run: |
          zip -r shared-images.zip shared/
          echo "::set-output name=shared_zip::$(pwd)/shared-images.zip"

      - name: Upload Shared ZIP
        uses: actions/upload-artifact@v3
        with:
          name: shared-images
          path: shared-images.zip

  scan:
    name: Trivy Scan
    needs: [setup, prepare]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.setup.outputs.images) }}
    steps:
      - name: Load Cached Trivy Binary and Database
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/trivy
            ~/.cache/trivy
          key: ${{ needs.setup.outputs.trivy_cache_key }}

      - name: Download Shared ZIP
        uses: actions/download-artifact@v3
        with:
          name: shared-images

      - name: Extract Shared ZIP
        run: unzip shared-images.zip

      - name: Load Pre-pulled Docker Image
        run: |
          IMAGE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9]/_/g')
          docker load < shared/${IMAGE_NAME}.tar

      - name: Run Trivy Vulnerability Scanner
        run: |
          echo "Scanning ${{ matrix.image }}..."
          trivy image \
            --format sarif \
            --output trivy-results-${{ matrix.image }}.sarif \
            --severity CRITICAL,MEDIUM \
            ${{ matrix.image }}

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results
          path: trivy-results-${{ matrix.image }}.sarif
