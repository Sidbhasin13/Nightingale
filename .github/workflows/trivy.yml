name: Trivy Scan

on:
  push:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"

permissions:
  contents: read
  security-events: write

jobs:
  setup:
    name: Setup and Fetch Images
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate with GitHub Container Registry
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: echo $CR_PAT | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Set Manual Images List
        run: |
          IMAGES='[
            "ghcr.io/rajanagori/nightingale:stable",
            "ghcr.io/rajanagori/nightingale_programming_image:stable",
            "ghcr.io/rajanagori/nightingale_osint_tools_image:stable",
            "ghcr.io/rajanagori/nightingale_network_vapt_image:stable",
            "ghcr.io/rajanagori/nightingale_wordlist_image:stable",
            "ghcr.io/rajanagori/nightingale_mobile_vapt_image:stable",
            "ghcr.io/rajanagori/nightingale_forensic_and_red_teaming:stable",
            "ghcr.io/rajanagori/nightingale_web_vapt_image:stable"
          ]'
          echo "IMAGES=$IMAGES" >> $GITHUB_ENV

  download:
    name: Pre-download Trivy DB and Images
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq

      - name: Cache Trivy Database
        id: cache_trivy
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: trivy-db-cache-${{ runner.os }}

      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Cache Docker Images
        id: docker_cache
        uses: actions/cache@v3
        with:
          path: /tmp/docker
          key: docker-images-${{ hashFiles('**/*.tar') }}  # Cache Docker images based on their tarball
        continue-on-error: true  # Avoid failing if cache is not found

      - name: Pre-pull Docker Images
        run: |
          IMAGES=${{ env.IMAGES }}
          echo "Pre-pulling Docker images..."
          mkdir -p /tmp/docker
          for IMAGE in $(echo $IMAGES | jq -r '.[]'); do
            if ! docker pull $IMAGE; then
              docker save $IMAGE -o /tmp/docker/$(basename $IMAGE).tar
            fi
          done

  scan:
    name: Trivy Scan
    needs: download
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(env.IMAGES) }}
        architecture:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Load Docker Images from Cache
        run: |
          IMAGE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9]/_/g')
          if [ -f "/tmp/docker/${IMAGE_NAME}.tar" ]; then
            docker load < /tmp/docker/${IMAGE_NAME}.tar
          else
            docker pull ${{ matrix.image }}
          fi

      - name: Run Trivy Vulnerability Scanner (SARIF)
        run: |
          echo "Scanning ${{ matrix.image }} for architecture ${{ matrix.architecture }}..."
          trivy image \
            --platform ${{ matrix.architecture }} \
            --format sarif \
            --output trivy-results-${{ matrix.image }}-${{ matrix.architecture }}.sarif \
            --severity CRITICAL,MEDIUM \
            ${{ matrix.image }}

      - name: Run Trivy Vulnerability Scanner (CycloneDX)
        run: |
          echo "Scanning ${{ matrix.image }} for architecture ${{ matrix.architecture }}..."
          trivy image \
            --platform ${{ matrix.architecture }} \
            --format cyclonedx \
            --scanners vuln \
            --output sbom-${{ matrix.image }}-${{ matrix.architecture }}.cyclonedx.json \
            --severity CRITICAL,MEDIUM \
            ${{ matrix.image }}

      - name: Upload SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results-${{ matrix.image }}-${{ matrix.architecture }}.sarif

      - name: Prepare Artifacts
        run: |
          mkdir -p artifacts
          mv sbom-${{ matrix.image }}-${{ matrix.architecture }}.cyclonedx.json artifacts/
          mv trivy-results-${{ matrix.image }}-${{ matrix.architecture }}.sarif artifacts/

      - name: Upload Artifacts (SBOM and SARIF)
        uses: actions/upload-artifact@v3
        with:
          name: trivy-sbom-sarif-${{ matrix.image }}-${{ matrix.architecture }}
          path: artifacts/
