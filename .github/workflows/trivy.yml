name: Trivy Scan

on:
  push:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"

permissions:
  contents: read
  security-events: write

jobs:
  setup:
    name: Fetch Stable Images from GitHub Container Registry
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.fetch_images.outputs.images }}
    steps:
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y wget jq zip

      - name: Authenticate with GitHub Container Registry
        env:
          CR_PAT: ${{ secrets.TOKEN }}
        run: echo $CR_PAT | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Fetch Stable Images from GitHub Container Registry
        id: fetch_images
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
        run: |
          echo "Fetching stable images from GitHub Container Registry..."
          RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/rajanagori/packages?package_type=container")

          # Extract images and check for valid entries
          IMAGES=$(echo "$RESPONSE" | jq -r 'map(select(.package_type == "container")) | .[].name')

          if [ -z "$IMAGES" ]; then
            echo "No container images found. Exiting."
            exit 1
          fi

          STABLE_IMAGES=()
          for PACKAGE in $IMAGES; do
            # Fetch versions for each package and handle errors (e.g., 404 for no stable versions)
            VERSIONS_RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/users/rajanagori/packages/container/${PACKAGE}/versions?per_page=100")

            # If the version response is empty or contains "Not Found", skip the package
            if [[ "$VERSIONS_RESPONSE" == *"Not Found"* || -z "$VERSIONS_RESPONSE" ]]; then
              echo "No versions or 404 error for package: $PACKAGE, skipping..."
              continue
            fi

            TAGS=$(echo "$VERSIONS_RESPONSE" | jq -r '.[]?.metadata?.container?.tags[]?')

            # Check if there are stable tags
            STABLE_TAGS=$(echo "$TAGS" | grep -w 'stable')

            if [[ -n "$STABLE_TAGS" ]]; then
              for TAG in $STABLE_TAGS; do
                STABLE_IMAGES+=("ghcr.io/rajanagori/${PACKAGE}:${TAG}")
              done
            else
              echo "No stable tags found for package: $PACKAGE, skipping..."
            fi
          done

          if [ ${#STABLE_IMAGES[@]} -eq 0 ]; then
            echo "No stable images found, skipping the job."
            exit 0
          fi

          echo "::set-output name=images::$(jq -c -n '$ARGS.positional' --args "${STABLE_IMAGES[@]}")"


  scan:
    name: Run Trivy Scan and Generate SBOM
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.setup.outputs.images) }}
    steps:
      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          wget https://github.com/aquasecurity/trivy/releases/download/v0.57.0/trivy_0.57.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.57.0_Linux-64bit.deb
          rm trivy_0.57.0_Linux-64bit.deb
          trivy image --download-db-only

      - name: Run Trivy Vulnerability Scanner (SARIF)
        run: |
          IMAGE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9]/_/g')  # Sanitize the image name
          echo "Scanning ${{ matrix.image }}..."
          mkdir -p artifacts  # Create the artifacts directory to collect results
          trivy image \
            --format sarif \
            --output artifacts/trivy-results-${IMAGE_NAME}.sarif \
            --severity CRITICAL,MEDIUM \
            --timeout 60m \
            ${{ matrix.image }}

      - name: Generate CycloneDX SBOM
        run: |
          IMAGE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9]/_/g')  # Sanitize the image name
          echo "Generating CycloneDX SBOM for ${{ matrix.image }}..."
          trivy image \
            --format cyclonedx \
            --scanners vuln \
            --output artifacts/sbom-${IMAGE_NAME}.cyclonedx.json \
            ${{ matrix.image }}

      - name: Upload Scan Results to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results
          path: artifacts/

  final:
    name: Collect Results, Create ZIP, and Upload
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Download Scan Results Artifacts
        uses: actions/download-artifact@v3
        with:
          name: trivy-scan-results

      - name: Create ZIP File for SARIF and SBOM
        run: |
          echo "Creating ZIP file for SARIF and SBOM files..."
          zip -r artifacts.zip artifacts/  # Compress all results into one ZIP file

      - name: Upload SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'artifacts/trivy-results-*.sarif'

      - name: Upload Single ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-results-and-sbom
          path: artifacts.zip