name: Trivy Scan

on:
  push:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"
  pull_request:
    branches: ["debug-trivy-scan-issue"]
    paths:
      - ".github/workflows/trivy.yml"

permissions:
  contents: read
  security-events: write

jobs:
  setup:
    name: Setup and Fetch Images
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.fetch_images.outputs.images }}
    steps:
      - name: Authenticate with GitHub Container Registry
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: echo $CR_PAT | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Fetch Stable Images from GitHub Container Registry
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching stable images from GitHub Container Registry..."
          GH_USER="RAJANAGORI" 
          GH_REPO="Nightingale"
          
          # Fetch list of container images using curl
          RESPONSE=$(curl -v -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/RAJANAGORI/packages?package_type=container")

          # Debug: Print the response to check its structure
          echo "API Response: $RESPONSE"

          # # Extract image names (this assumes that the response is a JSON array of containers)
          # IMAGES=$(echo $RESPONSE | jq -r '.[].name')

          # echo "Images: $IMAGES"

          # STABLE_IMAGES=()
          # # Extract image names and fetch stable tags
          # for PACKAGE in $IMAGES; do
          #   TAGS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
          #     -H "Accept: application/vnd.github.v3+json" \
          #     "https://api.github.com/users/$GH_USER/packages/container/${PACKAGE}/versions?per_page=100" \
          #     | jq -r '.[] | select(.metadata.container.tags[] | contains("stable")) | .metadata.container.tags[]')

          #   for TAG in $TAGS; do
          #     if [[ "$TAG" == *"stable"* ]]; then
          #       STABLE_IMAGES+=("ghcr.io/$GH_USER/${PACKAGE}:${TAG}")
          #     fi
          #   done
          # done

          # echo "Stable images found: ${STABLE_IMAGES[*]}"
          # echo "::set-output name=images::$(jq -c -n '$ARGS.positional' --args "${STABLE_IMAGES[@]}")"

  download:
    name: Pre-download Trivy DB and Images
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      shared_dir: ${{ steps.prepare.outputs.shared_dir }}
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq

      - name: Cache Trivy Database
        id: cache_trivy
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: trivy-db-cache

      - name: Refresh Trivy Database if Needed
        if: steps.cache_trivy.outputs.cache-hit != 'true'
        run: |
          echo "Refreshing Trivy database..."
          trivy image --download-db-only

      - name: Prepare Shared Directory
        id: prepare
        run: |
          mkdir -p shared
          echo "::set-output name=shared_dir::$(pwd)/shared"

      - name: Pre-pull Docker Images
        run: |
          echo "Pre-pulling all Docker images..."
          IMAGES=${{ needs.setup.outputs.images }}
          for IMAGE in $(echo $IMAGES | jq -r '.[]'); do
            docker pull $IMAGE
          done

      - name: Save Docker Images for Reuse
        run: |
          SHARED_DIR=${{ steps.prepare.outputs.shared_dir }}
          IMAGES=${{ needs.setup.outputs.images }}
          for IMAGE in $(echo $IMAGES | jq -r '.[]'); do
            IMAGE_NAME=$(echo $IMAGE | sed 's/[^a-zA-Z0-9]/_/g')
            docker save $IMAGE > ${SHARED_DIR}/${IMAGE_NAME}.tar
          done

  scan:
    name: Trivy Scan
    needs: download
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.setup.outputs.images) }}
        architecture:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq

      - name: Load Trivy Database from Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: trivy-db-cache

      - name: Load Pre-pulled Docker Image
        run: |
          SHARED_DIR=${{ needs.download.outputs.shared_dir }}
          IMAGE_NAME=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9]/_/g')
          docker load < ${SHARED_DIR}/${IMAGE_NAME}.tar

      - name: Run Trivy Vulnerability Scanner (SARIF)
        run: |
          echo "Scanning ${{ matrix.image }} for architecture ${{ matrix.architecture }}..."
          trivy image \
            --platform ${{ matrix.architecture }} \
            --format sarif \
            --output trivy-results-${{ matrix.image }}-${{ matrix.architecture }}.sarif \
            --severity CRITICAL,MEDIUM \
            ${{ matrix.image }}

      - name: Run Trivy Vulnerability Scanner (CycloneDX)
        run: |
          echo "Scanning ${{ matrix.image }} for architecture ${{ matrix.architecture }}..."
          trivy image \
            --platform ${{ matrix.architecture }} \
            --format cyclonedx \
            --scanners vuln \
            --output sbom-${{ matrix.image }}-${{ matrix.architecture }}.cyclonedx.json \
            --severity CRITICAL,MEDIUM \
            ${{ matrix.image }}

      - name: Upload SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results-${{ matrix.image }}-${{ matrix.architecture }}.sarif

      - name: Prepare Artifacts
        run: |
          mkdir -p artifacts
          mv sbom-${{ matrix.image }}-${{ matrix.architecture }}.cyclonedx.json artifacts/
          mv trivy-results-${{ matrix.image }}-${{ matrix.architecture }}.sarif artifacts/

      - name: Upload Artifacts (SBOM and SARIF)
        uses: actions/upload-artifact@v3
        with:
          name: trivy-sbom-sarif-${{ matrix.image }}-${{ matrix.architecture }}
          path: artifacts/
